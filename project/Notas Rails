/* Notas y recordatorios sobre el Framework Ruby on Rails */

// Al crear...
- Los model en Singular, con mayuscula la primera.
- scaffolding en singular, con mayuscula, y separados por mayusculas sin _ PorEjemploEsto
Ejemplo:
        rails generate scaffold HighScore game:string score:integer

// Para sacarle los RSpec
rails g scaffold Foobar name:string --no-helper-specs --no-view-specs

- Crear un modelo.
rails generate model Product name:string description:text


// Routing
- resources :drinks , establece la ruta para 7 actividades estandar (index, show, new, create, edit, update, destroy). Sino puedo definir cada ruta individualmente.

// Migraciones.
- Agregar un campo a un tabla.
rails generate migration AddPartNumberToProducts part_number:string
- Agregar una relasión.
rails generate migration AddUserRefToProducts user:references
rails generate migration AddCategoryRefToSelectionProcess categories:references


// Asociaciones.
- Las asociaciones entre modelos no son automaticas; es el programador el encargado de mantenerlas actualizadas. Para el caso de muchos a muchos, debe crear una tabla join apropiada.

Receta: para añadir una asociación uno-a-muchos
(one-to-many) en RoR
1.  Añadir has_many al fichero del modelo que posee y belongs_to en el lado del modelo poseído.
2.  Crear la migración para añadir la FK al lado poseído para que referencie al que le posee.
3.  Aplicar la migración.
4.  rake db:test:prepare para regenerar el esquema de la BD de test.

- Los campos referenciados se puede usar: t.references :user, index: true (y esto pone el usuario_id, y crea el indice apropiado). Desde la linea de comandos: user:references 

//Controler.
- El primero en recibir es Rack, que manda a ActionDispacher.
- ActionDispache primero busca, una clase: FooController y luego el metodo invocado en routes.rb; si no encuentra nada o esta vacio, asume que tiene que mostrar un index.html.
- Si el metodo esta vacio, busca un template con ese nombre... new.html.erb y lo renderiza.

//Debug...
Mandar un mensaje a la consola de Rails.
logger.debug "Person attributes hash: #{@user.attributes.inspect}"



//Que hay en los directorios...
== Description of Contents
app
  Holds all the code that's specific to this particular application.

app/controllers
  Holds controllers that should be named like weblogs_controller.rb for
  automated URL mapping. All controllers should descend from ApplicationController
  which itself descends from ActionController::Base.

app/models
  Holds models that should be named like post.rb.
  Most models will descend from ActiveRecord::Base.

app/views
  Holds the template files for the view that should be named like
  weblogs/index.html.erb for the WeblogsController#index action. All views use eRuby
  syntax.

app/views/layouts
  Holds the template files for layouts to be used with views. This models the common
  header/footer method of wrapping views. In your views, define a layout using the
  <tt>layout :default</tt> and create a file named default.html.erb. Inside default.html.erb,
  call <% yield %> to render the view using this layout.

app/helpers
  Holds view helpers that should be named like weblogs_helper.rb. These are generated
  for you automatically when using rails generate for controllers. Helpers can be used to
  wrap functionality for your views into methods.

config
  Configuration files for the Rails environment, the routing map, the database, and other dependencies.

db
  Contains the database schema in schema.rb.  db/migrate contains all
  the sequence of Migrations for your schema.

doc
  This directory is where your application documentation will be stored when generated
  using <tt>rake doc:app</tt>

lib
  Application specific libraries. Basically, any kind of custom code that doesn't
  belong under controllers, models, or helpers. This directory is in the load path.

public
  The directory available for the web server. Contains subdirectories for images, stylesheets,
  and javascripts. Also contains the dispatchers and the default HTML files. This should be
  set as the DOCUMENT_ROOT of your web server.

script
  Helper scripts for automation and generation.

test
  Unit and functional tests along with fixtures. When using the rails generate command, template
  test files will be generated for you and placed in this directory.

vendor
  External libraries that the application depends on. Also includes the plugins subdirectory.
  If the app has frozen rails, those gems also go here, under vendor/rails/.
  This directory is in the load path.
